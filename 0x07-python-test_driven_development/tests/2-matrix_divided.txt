"""
==============================
How to Use 2-matrix_divided.py
==============================

This module defines a matrix division function ``matrix_divided(matrix, div)``.

Usage
=====

The ``matrix_divided(matrix, div)`` function returns a new matrix that is a copy of the parameter
``matrix`` with all elements divided by ``div``.

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix = [
...     [9, 18, 27],
...     [36, 45, 54]
... ]
>>> print(matrix_divided(matrix, 3))
[[3.0, 6.0, 9.0], [12.0, 15.0, 18.0]]

Note that quotients are rounded to a maximum of two decimal places.

>>> matrix = [
...     [2, 4, 6],
...     [8, 10, 12]
... ]
>>> print(matrix_divided(matrix, 3))
[[0.67, 1.33, 2.0], [2.67, 3.33, 4.0]]

The original matrix is left unchanged.

>>> print(matrix)
[[2, 4, 6], [8, 10, 12]]

The function can also handle floating-point numbers.

>>> matrix = [
...     [1.5, -3.0, 4.5],
...     [6.0, 7.5, -9.0]
... ]
>>> print(matrix_divided(matrix, 3))
[[0.5, -1.0, 1.5], [2.0, 2.5, -3.0]]

Integers and floats can be combined.

>>> matrix = [
...     [1, -2.5, 3, 4.2, 5],
...     [-6.3, 7.0, 8, 9.999, 10]
... ]
>>> print(matrix_divided(matrix, 3))
[[0.33, -0.83, 1.0, 1.4, 1.67], [-2.1, 2.33, 2.67, 3.33, 3.33]]

Invalid Matrices
==============

The parameter ``matrix`` must be a list of lists consisting of either ints or
floats. If ``matrix`` is not a list, a TypeError is raised.

>>> matrix = "not a list"
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = None
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

Note that an empty list will raise the TypeError.

>>> matrix = []
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

But an empty list of lists will succeed.

>>> matrix = [[]]
>>> print(matrix_divided(matrix, 3))
[[]]

An identical TypeError is raised if ``matrix`` is not specifically a list of
lists.

>>> matrix = [1, 2, 3]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

The same TypeError is raised yet again if any elements in ``matrix`` are
neither ints nor floats.

>>> matrix = [
...     [1, 2, 3],
...     [4, "not a number", 6]
... ]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats


Finally, all the rows in ``matrix`` must be the same size. If any rows are
of different sizes, a new TypeError is raised.

>>> matrix = [
...     [1, 2, 3, 4],
...     [5, 6, 7]
... ]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

Invalid Divisors
================

The parameter ``div`` must be either an int or float. Otherwise, a TypeError
is raised.

>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]
>>> print(matrix_divided(matrix, "not a number"))
Traceback (most recent call last):
TypeError: div must be a number

>>> print(matrix_divided(matrix, None))
Traceback (most recent call last):
TypeError: div must be a number

``div`` must also be non-zero. Otherwise, a ZeroDivisionError is raised.

>>> print(matrix_divided(matrix, 0))
Traceback (most recent call last):
ZeroDivisionError: division by zero
"""
