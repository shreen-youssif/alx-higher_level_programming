"""
============================
How to Use 100-matrix_mul.py
============================

This module defines a matrix multiplication function ``matrix_mul(m_a, m_b)``.

Usage
=====
``matrix_mul(...)`` returns a new matrix representing the multiplication of
``m_a`` by ``m_b``.

>>> matrix_mul = __import__('100-matrix_mul').matrix_mul
>>> m_a = [
... [2, 4],
... [1, 3],
... ]
>>> m_b = [
... [3, 1],
... [5, 2]
... ]
>>> print(matrix_mul(m_a, m_b))
[[26, 10], [18, 7]]

>>> m_a = [[-1, 2]]
>>> m_b = [
... [3],
... [4]
... ]
>>> print(matrix_mul(m_a, m_b))
[[5]]

The function also works with floating-point numbers.

>>> m_a = [
... [1.5, 2.5],
... [3.5, 4.5],
... ]
>>> m_b = [
... [2.5, 3.5],
... [4.5, 5.5]
... ]
>>> print(matrix_mul(m_a, m_b))
[[13.75, 16.25], [29.75, 35.25]]

Integers and floats can be combined.

>>> m_a = [
... [1, 2.5, 3.3],
... [4, 5, 6.6],
... ]
>>> m_b = [
... [1.1, 2],
... [3.3, 4.4],
... [5, 6.6]
... ]
>>> print(matrix_mul(m_a, m_b))
[[22.35, 28.18], [53.84, 66.18]]

A minimum of two arguments must be provided. Otherwise, a TypeError is raised.

>>> print(matrix_mul([[1, 2]])) # doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

ValueErrors
===========

If two matrices cannot be multiplied (i.e., the row count of ``m_a`` is not
equal to the column count in ``m_b``), a ValueError is raised.

>>> m_a = [
... [1, 2],
... [3, 4],
... ]
>>> m_b = [
... [1, 2],
... [2, 3],
... [4, 5]
... ]
>>> print(matrix_mul(m_a, m_b))
Traceback (most recent call last):
ValueError: m_a and m_b can't be multiplied

The parameters ``m_a`` and ``m_b`` cannot be empty. Otherwise, a ValueError
is raised.

>>> print(matrix_mul([], [[1, 2]]))
Traceback (most recent call last):
ValueError: m_a can't be empty

>>> print(matrix_mul([[1, 2]], [[]]))
Traceback (most recent call last):
ValueError: m_b can't be empty

>>> print(matrix_mul([[]], []))
Traceback (most recent call last):
ValueError: m_a can't be empty

Invalid Matrices
================

The parameters ``m_a`` and ``m_b`` must be lists. If either parameter is
not a list, a TypeError is raised.

>>> print(matrix_mul("not a list", [[1, 2]]))
Traceback (most recent call last):
TypeError: m_a must be a list

>>> print(matrix_mul([[1, 2]], "also not a list"))
Traceback (most recent call last):
TypeError: m_b must be a list

>>> print(matrix_mul(None, None))
Traceback (most recent call last):
TypeError: m_a must be a list

Not just any list - they *must* be lists of lists!

>>> print(matrix_mul([1, 2], [[3, 4]]))
Traceback (most recent call last):
TypeError: m_a must be a list of lists

>>> print(matrix_mul([[1, 2]], [3, 4]))
Traceback (most recent call last):
TypeError: m_b must be a list of lists

And not just any list of lists - they *must* be lists of lists containing
integers or floats!

>>> print(matrix_mul([[1, "non-number"]], [[3, 4]]))
Traceback (most recent call last):
TypeError: m_a should contain only integers or floats

>>> print(matrix_mul([[1, 2]], [[{"a": 1}, 8.8]]))
Traceback (most recent call last):
TypeError: m_b should contain only integers or floats

>>> print(matrix_mul([[1, "non-number"]], [[{"a": 1}, 8.8]]))
Traceback (most recent call last):
TypeError: m_a should contain only integers or floats

Finally, the length of all rows in matrices ``m_a`` and ``m_b`` should be
equivalent. Otherwise, a TypeError is raised.

>>> m_a = [
... [41, 42],
... [51, 52, 53]
... ]
>>> m_b = [
... [1, 2],
... [3, 4]
... ]
>>> print(matrix_mul(m_a, m_b))
Traceback (most recent call last):
TypeError: each row of m_a must should be of the same size

>>> m_a = [
... [80, 81],
... [90, 91]
... ]
>>> m_b = [
... [11, 22],
... [54, 55, 56]
... ]
>>> print(matrix_mul(m_a, m_b))
Traceback (most recent call last):
TypeError: each row of m_b must should be of the same size
>>> m_a = [
... [2, 5],
... [63, 40],
... ]
>>> m_b = m_a
>>> print(matrix_mul(m_a, m_b))
Traceback (most recent call last):
TypeError: each row of m_a must should be of the same size
"""
