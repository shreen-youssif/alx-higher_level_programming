"""
================================
How to Use 5-text_indentation.py
================================

This module defines a text-indentation function ``text_indentation(text)``.

Usage
=====

Text is printed with two new lines after each of the characters ``.``, ``?``,
and ``:``.

>>> text_indentation = __import__('5-text_indentation').text_indentation
>>> text_indentation("Hey there!")
Hey there!
<BLANKLINE>

No spaces are printed at the beginning of a line.

>>> text_indentation("   What's up?")
What's up?
<BLANKLINE>

>>> text_indentation("          ")

Similarly, no spaces are printed at the end of each printed line.

>>> text_indentation("Hello.   ")
Hello.
<BLANKLINE>

>>> text_indentation("    Woah now.    This is fun.   ")
Woah now.
<BLANKLINE>
This is fun.
<BLANKLINE>

New lines are only printed for the characters ``.``, ``?``, and ``:`` -
text not ending with one of these characters is not ended with a new line.

>>> text_indentation("No ending period, it's okay")
No ending period, it's okay

New lines within a string are printed as normal.

>>> text_indentation("Let's print a new-line! Here goes:\nPrinted.")
Let's print a new-line! Here goes:
<BLANKLINE>
<BLANKLINE>
Printed.
<BLANKLINE>

>>> text_indentation("\n\n\n We just printed three new lines.")
<BLANKLINE>
<BLANKLINE>
<BLANKLINE>
We just printed three new lines.
<BLANKLINE>

>>> text_indentation("A sneaky \n new line.")
A sneaky 
new line.
<BLANKLINE>

A combo example:

>>> text_indentation("Yassin Elsaman? How are you: Mohamed, Youssif?")
Yassin Elsaman?
<BLANKLINE>
How are you:
<BLANKLINE>
Mohamed, Youssif?
<BLANKLINE>

Invalid Text
============

The parameter ``text`` must be a string. Otherwise, a TypeError is raised.

>>> text_indentation(7)
Traceback (most recent call last):
TypeError: text must be a string

>>> text_indentation({"one": 1, "two": 2})
Traceback (most recent call last):
TypeError: text must be a string

>>> text_indentation(None)
Traceback (most recent call last):
TypeError: text must be a string
"""
